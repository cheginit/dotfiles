source $HOME/.dotfiles/envs

#====================Functions===================#

gpush(){
    [ -z "$1" ] && comm="fixed issues" || comm="$1"
    git add . && \
    git commit -m "$comm" && \
    git push
}

ana(){
    shell="$(basename $SHELL)"
    __conda_setup="$(${APP_DIR}/miniconda/bin/conda shell.$shell hook 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "${APP_DIR}/miniconda/etc/profile.d/conda.sh" ]; then
            . "${APP_DIR}/miniconda/etc/profile.d/conda.sh"
        else
            export PATH="${APP_DIR}/miniconda/bin:$PATH"
        fi
    fi
    unset __conda_setup
}

git_latest(){
    repo=$1
    asset=$2
    URL=$( curl -s "https://api.github.com/repos/${repo}/releases/latest" | jq -r ".assets[$asset] | .browser_download_url" ) && \
    curl -LO "$URL" && \
    echo "$(basename $URL)"
}

git_latest_version(){
    curl --silent "https://api.github.com/repos/$1/releases/latest" |
    grep '"tag_name":' |
    sed -E 's/.*"([^"]+)".*/\1/'
}

mkd() {
    mkdir -p "$@" && cd "$@" || exit
}

# copy the argument to clipboard
c2c() {
    echo "$1" | xclip -sel clip
}

# soft link a file using readlink
lns() {
    ln -s "$(realpath "${1-}")" "${2-}"
}


# power of usb for removing safely
usboff(){
    udisksctl unmount -b /dev/$1 && udisksctl power-off -b /dev/$1
}

# install deb files
debin(){
    if [[ -f "$1" ]]; then
        sudo dpkg -i "$1"
        sudo apt install -yf
    else
        echo "$1 not found!"
    fi
}

# install deb from url
deburl(){
    url="$1"
    fname="$(basename $url)"
    aria2c -d /tmp -x 8 -o "$fname" $url
    debin /tmp/$fname
    rm -f /tmp/$fname
}

# from https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/extract/extract.plugin.zsh
extract() {
	local remove_archive
	local success
	local extract_dir

	if (( $# == 0 )); then
		cat <<-'EOF' >&2
			Usage: extract [-option] [file ...]

			Options:
			    -r, --remove    Remove archive after unpacking.
		EOF
	fi

	remove_archive=1
	if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then
		remove_archive=0
		shift
	fi

	while (( $# > 0 )); do
		if [[ ! -f "$1" ]]; then
			echo "extract: '$1' is not a valid file" >&2
			shift
			continue
		fi

		success=0
		extract_dir="${1:t:r}"
		case "${1:l}" in
			(*.tar.gz|*.tgz) (( $+commands[pigz] )) && { pigz -dc "$1" | tar xv } || tar zxvf "$1" ;;
			(*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;
			(*.tar.xz|*.txz)
				tar --xz --help &> /dev/null \
				&& tar --xz -xvf "$1" \
				|| xzcat "$1" | tar xvf - ;;
			(*.tar.zma|*.tlz)
				tar --lzma --help &> /dev/null \
				&& tar --lzma -xvf "$1" \
				|| lzcat "$1" | tar xvf - ;;
			(*.tar.zst|*.tzst)
				tar --zstd --help &> /dev/null \
				&& tar --zstd -xvf "$1" \
				|| zstdcat "$1" | tar xvf - ;;
			(*.tar) tar xvf "$1" ;;
			(*.tar.lz) (( $+commands[lzip] )) && tar xvf "$1" ;;
			(*.tar.lz4) lz4 -c -d "$1" | tar xvf - ;;
			(*.tar.lrz) (( $+commands[lrzuntar] )) && lrzuntar "$1" ;;
			(*.gz) (( $+commands[pigz] )) && pigz -dk "$1" || gunzip -k "$1" ;;
			(*.bz2) bunzip2 "$1" ;;
			(*.xz) unxz "$1" ;;
			(*.lrz) (( $+commands[lrunzip] )) && lrunzip "$1" ;;
			(*.lz4) lz4 -d "$1" ;;
			(*.lzma) unlzma "$1" ;;
			(*.z) uncompress "$1" ;;
			(*.zip|*.war|*.jar|*.sublime-package|*.ipsw|*.xpi|*.apk|*.aar|*.whl) unzip "$1" -d $extract_dir ;;
			(*.rar) unrar x -ad "$1" ;;
			(*.rpm) mkdir "$extract_dir" && cd "$extract_dir" && rpm2cpio "../$1" | cpio --quiet -id && cd .. ;;
			(*.7z) 7za x "$1" ;;
			(*.deb)
				mkdir -p "$extract_dir/control"
				mkdir -p "$extract_dir/data"
				cd "$extract_dir"; ar vx "../${1}" > /dev/null
				cd control; tar xzvf ../control.tar.gz
				cd ../data; extract ../data.tar.*
				cd ..; rm *.tar.* debian-binary
				cd ..
			;;
			(*.zst) unzstd "$1" ;;
			(*)
				echo "extract: '$1' cannot be extracted" >&2
				success=1
			;;
		esac

		(( success = $success > 0 ? $success : $? ))
		(( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"
		shift
	done
}

gins() {
    ginstall.sh -d ~/.local/bin "$1" latest
}

giup() {
    for app in bat rg exa fd nnn shellcheck; do
    gins $app
    done
}

mup() {
    fname=$(git_latest 'microsoft/cascadia-code' 0) && \
    unzip $fname 'otf/*.otf' && \
    sudo mv otf/* /usr/local/share/fonts && \
    rm -rf $fname otf
}

#==============================aliases=============================#

alias vim='nvim'
alias nv='nvim'
alias apup='sudo apt update && sudo apt upgrade && sudo snap refresh && sudo apt autoremove && sudo apt autoclean'
alias pup='pip3 install --user -U thefuck jedi pynvim youtube-dl msgpack'
alias rsync='rsync -ahvz --info=progress2'
alias open="xdg-open"
alias cdg="cd ${GITHUB_DIR}"
alias api='sudo apt install'
alias apr='sudo apt purge'
alias cat="bat"
alias tdi="td --interactive"
alias cb="xclip -sel clip < "
alias reload='exec zsh -l'
alias x=extract
alias gin=""
alias ls='exa --group-directories-first --color=auto --color-scale -F'

if [[ -f ~/.aliases.local ]];then
    source $HOME/.aliases.local
fi

